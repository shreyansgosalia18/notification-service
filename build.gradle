plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.4.0'  // For Docker image building
}

group = 'com.karbonCard.assignment'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Core dependencies
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springframework.kafka:spring-kafka'

    // Resilience
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'

    // Metrics
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

// JAR configuration
bootJar {
    archiveFileName = "notification-service.jar"
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

// Docker image configuration using Jib
jib {
    from {
        image = 'eclipse-temurin:21-jre-alpine'
    }
    to {
        // For local development
        image = "${project.name}:${project.version}"
        // Uncomment for actual deployment
        // image = "registry.example.com/${project.name}:${project.version}"
    }
    container({
        jvmFlags = ['-Xms256m', '-Xmx512m']
        ports = [8080]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        // Add labels for better container management
        labels = [
                'maintainer': 'YourName',
                'app.name': project.name,
                'app.version': project.version
        ]
        // Add health check
        mainClass = 'com.karbonCard.assignment.NotificationServiceApplication'
    })
}